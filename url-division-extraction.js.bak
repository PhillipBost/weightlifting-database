const puppeteer = require('puppeteer');
const fs = require('fs');

// Quick test to identify the correct selectors and verify approach
async function testSport80Structure() {
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();
    
    console.log('🔍 Analyzing Sport80 page structure...');
    
    try {
        await page.goto('https://usaweightlifting.sport80.com/public/rankings/all');
        await page.waitForFunction(() => document.readyState === 'complete');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Analyze all select elements on the page
        const selectElements = await page.evaluate(() => {
            const selects = Array.from(document.querySelectorAll('select'));
            return selects.map(select => ({
                id: select.id,
                name: select.name,
                className: select.className,
                optionCount: select.options.length,
                firstFewOptions: Array.from(select.options).slice(0, 5).map(opt => ({
                    value: opt.value,
                    text: opt.textContent.trim()
                }))
            }));
        });
        
        console.log('📋 Found select elements:');
        selectElements.forEach((select, index) => {
            console.log(`\n${index + 1}. Select Element:`);
            console.log(`   ID: "${select.id}"`);
            console.log(`   Name: "${select.name}"`);
            console.log(`   Class: "${select.className}"`);
            console.log(`   Options: ${select.optionCount}`);
            console.log(`   Sample options:`, select.firstFewOptions);
        });
        
        // Look for division/weight class related elements
        const divisionElement = selectElements.find(select => 
            select.name.includes('weight') || 
            select.name.includes('division') ||
            select.id.includes('weight') ||
            select.id.includes('division') ||
            select.className.includes('weight') ||
            select.className.includes('division')
        );
        
        if (divisionElement) {
            console.log('\n🎯 Likely division selector found:', divisionElement);
        } else {
            console.log('\n⚠️  No obvious division selector found. Manual inspection needed.');
        }
        
        // Test URL manipulation
        console.log('\n🔗 Testing URL manipulation...');
        
        // Try to find and interact with the most likely weight class selector
        const weightClassSelector = selectElements.find(s => s.optionCount > 50); // Weight classes likely have many options
        
        if (weightClassSelector) {
            const selector = weightClassSelector.id ? `#${weightClassSelector.id}` : 
                           weightClassSelector.name ? `select[name="${weightClassSelector.name}"]` :
                           `select.${weightClassSelector.className.split(' ')[0]}`;
            
            console.log(`   Using selector: ${selector}`);
            
            // Try changing to a different option
            const testOption = weightClassSelector.firstFewOptions.find(opt => opt.value && opt.value !== '');
            if (testOption) {
                console.log(`   Testing with option: ${testOption.value} (${testOption.text})`);
                
                await page.select(selector, testOption.value);
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                const newUrl = page.url();
                console.log(`   New URL: ${newUrl}`);
                
                // Decode filters if present
                if (newUrl.includes('filters=')) {
                    const encodedFilters = newUrl.split('filters=')[1];
                    try {
                        const decodedFilters = JSON.parse(atob(encodedFilters));
                        console.log(`   Decoded filters:`, decodedFilters);
                    } catch (e) {
                        console.log(`   Could not decode filters: ${e.message}`);
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('Error during analysis:', error);
    } finally {
        await browser.close();
    }
}

// Test with specific known division
async function testKnownDivision() {
    console.log('\n🧪 Testing with known division: Open Men\'s 96kg');
    
    // We know this should map to weight_class: 87
    const expectedCode = 87;
    const expectedURL = 'https://usaweightlifting.sport80.com/public/rankings/all?filters=eyJkYXRlX3JhbmdlX3N0YXJ0IjoiMjAyNS0wMS0wMSIsImRhdGVfcmFuZ2VfZW5kIjoiMjAyNS0xMi0zMSIsIndlaWdodF9jbGFzcyI6ODd9';
    
    const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();
    
    try {
        await page.goto(expectedURL);
        await page.waitForFunction(() => document.readyState === 'complete');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Check if the page loaded correctly and shows the right division
        const pageTitle = await page.title();
        const currentUrl = page.url();
        
        console.log(`   Page title: ${pageTitle}`);
        console.log(`   Current URL: ${currentUrl}`);
        console.log(`   URL matches expected: ${currentUrl === expectedURL}`);
        
        // Check what's actually selected
        const selectedValues = await page.evaluate(() => {
            const selects = Array.from(document.querySelectorAll('select'));
            return selects.map(select => ({
                name: select.name || select.id,
                selectedValue: select.value,
                selectedText: select.options[select.selectedIndex]?.textContent?.trim()
            })).filter(s => s.selectedValue);
        });
        
        console.log('   Currently selected values:', selectedValues);
        
    } catch (error) {
        console.error('Error testing known division:', error);
    } finally {
        await browser.close();
    }
}

// Main test function
async function runTests() {
    console.log('🚀 Starting Sport80 structure analysis...\n');
    
    await testSport80Structure();
    await testKnownDivision();
    
    console.log('\n✅ Analysis complete. Review the output to identify the correct selectors.');
    console.log('💡 Once you confirm the selectors work, run the full scraper with all 778 divisions.');
}

// Run tests
runTests().catch(console.error);