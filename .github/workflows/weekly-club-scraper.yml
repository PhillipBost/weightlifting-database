name: Weekly Club Data Scraping and Import

on:
  schedule:
    # Run every Sunday at 7 AM UTC (after meet addresses)
    - cron: '0 7 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  scrape-and-import-clubs:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Increased timeout for enhanced scraping with retries
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Create output and logs directories
        run: |
          mkdir -p output logs
      
      - name: Scrape club data
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          RESUME_SCRAPING: 'false'  # Always start fresh in CI/CD
        run: |
          echo "🏋️ Starting enhanced club data scraping..."
          echo "Scraping USA Weightlifting barbell club directory with improved error handling..."
          
          # Run with timeout and capture exit code
          timeout 2400 node scripts/production/club-scraper.js || EXIT_CODE=$?
          
          if [ ${EXIT_CODE:-0} -eq 124 ]; then
            echo "⚠️ Scraping timed out after 40 minutes, but may have partial results"
          elif [ ${EXIT_CODE:-0} -ne 0 ]; then
            echo "❌ Scraping failed with exit code ${EXIT_CODE}"
            exit 1
          else
            echo "✅ Scraping completed successfully"
          fi
      
      - name: Check if clubs were scraped
        id: check_clubs
        run: |
          if [ -f "output/club_data.json" ]; then
            # Count clubs in the output file
            club_count=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/club_data.json', 'utf8'));
                console.log(data.clubs ? data.clubs.length : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            
            new_club_count=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/club_data.json', 'utf8'));
                console.log(data.metadata ? (data.metadata.new_clubs_added || 0) : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            
            clubs_with_phone=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/club_data.json', 'utf8'));
                console.log(data.metadata ? (data.metadata.clubs_with_phone || 0) : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            
            clubs_with_email=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/club_data.json', 'utf8'));
                console.log(data.metadata ? (data.metadata.clubs_with_email || 0) : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            
            clubs_with_address=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/club_data.json', 'utf8'));
                console.log(data.metadata ? (data.metadata.clubs_with_address || 0) : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            
            echo "club_count=$club_count" >> $GITHUB_OUTPUT
            echo "new_club_count=$new_club_count" >> $GITHUB_OUTPUT
            echo "clubs_with_phone=$clubs_with_phone" >> $GITHUB_OUTPUT
            echo "clubs_with_email=$clubs_with_email" >> $GITHUB_OUTPUT
            echo "clubs_with_address=$clubs_with_address" >> $GITHUB_OUTPUT
            
            echo "📊 Found $club_count total clubs ($new_club_count new)"
            echo "📞 Clubs with phone: $clubs_with_phone"
            echo "📧 Clubs with email: $clubs_with_email"
            echo "📍 Clubs with address: $clubs_with_address"
            
            if [ $club_count -gt 0 ]; then
              echo "has_clubs=true" >> $GITHUB_OUTPUT
            else
              echo "has_clubs=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No club_data.json file found"
            echo "has_clubs=false" >> $GITHUB_OUTPUT
            echo "club_count=0" >> $GITHUB_OUTPUT
            echo "new_club_count=0" >> $GITHUB_OUTPUT
            echo "clubs_with_phone=0" >> $GITHUB_OUTPUT
            echo "clubs_with_email=0" >> $GITHUB_OUTPUT
            echo "clubs_with_address=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Import club data to database
        if: steps.check_clubs.outputs.has_clubs == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "📊 Starting club data import..."
          echo "Processing ${{ steps.check_clubs.outputs.club_count }} clubs"
          
          node scripts/production/club-importer.js
      
      - name: Geocode club addresses
        if: steps.check_clubs.outputs.has_clubs == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "🗺️ Starting club geocoding..."
          echo "Geocoding club addresses using Nominatim API"
          
          node scripts/geographic/club-geocoder.js
      
      - name: Fetch club elevation data
        if: steps.check_clubs.outputs.has_clubs == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "🏔️ Starting club elevation fetch..."
          echo "Fetching elevation data for geocoded clubs"
          
          node -e "
            const { fetchAndUpdateClubElevations } = require('./elevation-fetcher.js');
            fetchAndUpdateClubElevations().then(results => {
              console.log('✅ Club elevation fetch completed');
              console.log(\`📊 Results: \${results.updated} updated, \${results.failed} failed\`);
            }).catch(error => {
              console.error('❌ Club elevation fetch failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Check geographic data coverage
        id: check_geo_data
        if: steps.check_clubs.outputs.has_clubs == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "📊 Checking geographic data coverage..."
          
          # Get geographic statistics from database
          clubs_with_coordinates=$(node -e "
            const { createClient } = require('@supabase/supabase-js');
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SECRET_KEY);
            supabase.from('clubs').select('latitude').not('latitude', 'is', null).then(({data}) => {
              console.log(data ? data.length : 0);
            }).catch(e => console.log(0));
          ")
          
          clubs_with_elevation=$(node -e "
            const { createClient } = require('@supabase/supabase-js');
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SECRET_KEY);
            supabase.from('clubs').select('elevation_meters').not('elevation_meters', 'is', null).then(({data}) => {
              console.log(data ? data.length : 0);
            }).catch(e => console.log(0));
          ")
          
          successful_geocodes=$(node -e "
            const { createClient } = require('@supabase/supabase-js');
            const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SECRET_KEY);
            supabase.from('clubs').select('geocode_success').eq('geocode_success', true).then(({data}) => {
              console.log(data ? data.length : 0);
            }).catch(e => console.log(0));
          ")
          
          echo "clubs_with_coordinates=$clubs_with_coordinates" >> $GITHUB_OUTPUT
          echo "clubs_with_elevation=$clubs_with_elevation" >> $GITHUB_OUTPUT
          echo "successful_geocodes=$successful_geocodes" >> $GITHUB_OUTPUT
          
          echo "🗺️ Clubs with coordinates: $clubs_with_coordinates"
          echo "🏔️ Clubs with elevation: $clubs_with_elevation"
          echo "✅ Successful geocodes: $successful_geocodes"
      
      - name: Upload results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: club-data-$(date +%Y-%m-%d)
          path: |
            output/club_data.json
            logs/club-scraper.log
            logs/club-importer.log
            logs/club-geocoder.log
            logs/elevation-fetch.log
          retention-days: 30
      
      - name: Create summary
        if: always()
        run: |
          echo "## 🏋️ Weekly Club Data Scraping Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_clubs.outputs.has_clubs }}" == "true" ]; then
            echo "✅ **Status:** Successfully scraped and imported club data" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🏢 **Total Clubs:** ${{ steps.check_clubs.outputs.club_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- 🆕 **New Clubs Added:** ${{ steps.check_clubs.outputs.new_club_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📞 **Clubs with Phone:** ${{ steps.check_clubs.outputs.clubs_with_phone }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📧 **Clubs with Email:** ${{ steps.check_clubs.outputs.clubs_with_email }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📍 **Clubs with Address:** ${{ steps.check_clubs.outputs.clubs_with_address }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Actions Completed:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Scraped USA Weightlifting club directory with enhanced error handling" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 Extracted club names, addresses, phone numbers, and emails" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Normalized and validated club data" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 Used retry logic and progressive saving for reliability" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Imported to Supabase clubs table" >> $GITHUB_STEP_SUMMARY
            echo "- 🗺️ Geocoded club addresses" >> $GITHUB_STEP_SUMMARY
            echo "- 🏔️ Fetched elevation data for clubs" >> $GITHUB_STEP_SUMMARY
            
            # Calculate data quality percentages
            if [ ${{ steps.check_clubs.outputs.club_count }} -gt 0 ]; then
              phone_pct=$(( ${{ steps.check_clubs.outputs.clubs_with_phone }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
              email_pct=$(( ${{ steps.check_clubs.outputs.clubs_with_email }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
              address_pct=$(( ${{ steps.check_clubs.outputs.clubs_with_address }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Data Quality:**" >> $GITHUB_STEP_SUMMARY
              echo "- Phone Coverage: ${phone_pct}%" >> $GITHUB_STEP_SUMMARY
              echo "- Email Coverage: ${email_pct}%" >> $GITHUB_STEP_SUMMARY
              echo "- Address Coverage: ${address_pct}%" >> $GITHUB_STEP_SUMMARY
              
              # Calculate geographic data coverage percentages if available
              if [ -n "${{ steps.check_geo_data.outputs.clubs_with_coordinates }}" ]; then
                coord_pct=$(( ${{ steps.check_geo_data.outputs.clubs_with_coordinates }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
                geocode_pct=$(( ${{ steps.check_geo_data.outputs.successful_geocodes }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
                elevation_pct=$(( ${{ steps.check_geo_data.outputs.clubs_with_elevation }} * 100 / ${{ steps.check_clubs.outputs.club_count }} ))
                
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Geographic Data Coverage:**" >> $GITHUB_STEP_SUMMARY
                echo "- 🗺️ **Clubs with Coordinates:** ${{ steps.check_geo_data.outputs.clubs_with_coordinates }} (${coord_pct}%)" >> $GITHUB_STEP_SUMMARY
                echo "- ✅ **Successful Geocodes:** ${{ steps.check_geo_data.outputs.successful_geocodes }} (${geocode_pct}%)" >> $GITHUB_STEP_SUMMARY
                echo "- 🏔️ **Clubs with Elevation:** ${{ steps.check_geo_data.outputs.clubs_with_elevation }} (${elevation_pct}%)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "⚠️ **Status:** No club data found or scraping failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This may indicate an issue with the club directory website or scraping logic." >> $GITHUB_STEP_SUMMARY
            echo "Check the logs for more details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Logs and data available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup output files
        if: always()
        run: |
          # Keep logs but clean up large output files to save space
          rm -f output/club_data.json