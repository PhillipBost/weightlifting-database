name: Daily Division Scraper

on:
  schedule:
    # Run at 3 AM EST every day (8 AM UTC)
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      day_override:
        description: 'Override day for testing (monday, tuesday, etc.)'
        required: false
        type: string
      division_start:
        description: 'Override division start (for testing)'
        required: false
        type: number
      division_end:
        description: 'Override division end (for testing)'
        required: false
        type: number

jobs:
  determine-divisions:
    runs-on: ubuntu-latest
    outputs:
      day_name: ${{ steps.setup.outputs.day_name }}
      division_start: ${{ steps.setup.outputs.division_start }}
      division_end: ${{ steps.setup.outputs.division_end }}
      should_run: ${{ steps.setup.outputs.should_run }}

    steps:
      - name: Setup division parameters
        id: setup
        run: |
          # Get day of week (0=Sunday, 1=Monday, etc.)
          if [ -n "${{ github.event.inputs.day_override }}" ]; then
            # Manual trigger with day override
            DAY_INPUT="${{ github.event.inputs.day_override }}"
            echo "Using manual day override: $DAY_INPUT"

            case "$DAY_INPUT" in
              "monday") DOW=1 ;;
              "tuesday") DOW=2 ;;
              "wednesday") DOW=3 ;;
              "thursday") DOW=4 ;;
              "friday") DOW=5 ;;
              "saturday") DOW=6 ;;
              "sunday") DOW=0 ;;
              *) echo "Invalid day: $DAY_INPUT"; exit 1 ;;
            esac
          else
            # Scheduled run - get current day
            DOW=$(date +%w)
          fi

          echo "Day of week: $DOW"

          # Map day of week to division ranges
          case $DOW in
            1) # Monday
              DAY_NAME="Monday"
              DIVISION_START=1
              DIVISION_END=35
              ;;
            2) # Tuesday
              DAY_NAME="Tuesday"
              DIVISION_START=36
              DIVISION_END=70
              ;;
            3) # Wednesday
              DAY_NAME="Wednesday"
              DIVISION_START=71
              DIVISION_END=106
              ;;
            4) # Thursday
              DAY_NAME="Thursday"
              DIVISION_START=107
              DIVISION_END=141
              ;;
            5) # Friday
              DAY_NAME="Friday"
              DIVISION_START=142
              DIVISION_END=177
              ;;
            6) # Saturday
              DAY_NAME="Saturday"
              DIVISION_START=178
              DIVISION_END=213
              ;;
            0) # Sunday
              DAY_NAME="Sunday"
              DIVISION_START=214
              DIVISION_END=248
              ;;
            *)
              echo "Invalid day of week: $DOW"
              exit 1
              ;;
          esac

          # Allow manual override of division ranges for testing
          if [ -n "${{ github.event.inputs.division_start }}" ]; then
            DIVISION_START="${{ github.event.inputs.division_start }}"
            echo "Override division start: $DIVISION_START"
          fi

          if [ -n "${{ github.event.inputs.division_end }}" ]; then
            DIVISION_END="${{ github.event.inputs.division_end }}"
            echo "Override division end: $DIVISION_END"
          fi

          echo "day_name=$DAY_NAME" >> $GITHUB_OUTPUT
          echo "division_start=$DIVISION_START" >> $GITHUB_OUTPUT
          echo "division_end=$DIVISION_END" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT

          echo "📅 $DAY_NAME: Divisions $DIVISION_START-$DIVISION_END"

  scrape-divisions:
    needs: determine-divisions
    if: needs.determine-divisions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hour timeout

    env:
      TZ: America/New_York
      DIVISION_START: ${{ needs.determine-divisions.outputs.division_start }}
      DIVISION_END: ${{ needs.determine-divisions.outputs.division_end }}
      DAY_NAME: ${{ needs.determine-divisions.outputs.day_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create output directories
        run: |
          DAY_LOWER=$(echo "$DAY_NAME" | tr '[:upper:]' '[:lower:]')
          mkdir -p output/athletes
          mkdir -p logs/$DAY_LOWER
          echo "📁 Created output directories for $DAY_NAME"

      - name: Run division scraper
        run: |
          echo "🏋️ Starting $DAY_NAME scraper (Divisions $DIVISION_START-$DIVISION_END)"
          echo "🕐 Start time: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "🎯 Target divisions: $DIVISION_START to $DIVISION_END"

          node scripts/production/nightly-division-scraper.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.determine-divisions.outputs.day_name }}-logs-${{ github.run_number }}
          path: |
            logs/*/
            completed_divisions_*.csv
            athlete_extraction_details.csv
          retention-days: 30

      - name: Upload athlete CSVs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.determine-divisions.outputs.day_name }}-athletes-${{ github.run_number }}
          path: output/athletes/*.csv
          retention-days: 7

      - name: Create summary
        if: always()
        run: |
          echo "## 🏋️ $DAY_NAME Division Scraper Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Day:** $DAY_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Divisions:** $DIVISION_START - $DIVISION_END" >> $GITHUB_STEP_SUMMARY
          echo "**Total Divisions:** $(($DIVISION_END - $DIVISION_START + 1))" >> $GITHUB_STEP_SUMMARY
          echo "**Start Time:** $(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count athlete files created
          ATHLETE_COUNT=$(find output/athletes -name "*.csv" 2>/dev/null | wc -l)
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- 👥 Athlete files created: $ATHLETE_COUNT" >> $GITHUB_STEP_SUMMARY

          # Show completion status if available
          DAY_LOWER=$(echo "$DAY_NAME" | tr '[:upper:]' '[:lower:]')
          COMPLETION_FILE="completed_divisions_${DAY_LOWER}.csv"

          if [ -f "$COMPLETION_FILE" ]; then
            COMPLETED_COUNT=$(tail -n +2 "$COMPLETION_FILE" 2>/dev/null | wc -l)
            echo "- ✅ Divisions completed: $COMPLETED_COUNT" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recent Divisions Processed:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -10 "$COMPLETION_FILE" 2>/dev/null >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ No completion file found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Daily Schedule:**" >> $GITHUB_STEP_SUMMARY
          echo "- Monday: Divisions 1-35" >> $GITHUB_STEP_SUMMARY
          echo "- Tuesday: Divisions 36-70" >> $GITHUB_STEP_SUMMARY
          echo "- Wednesday: Divisions 71-106" >> $GITHUB_STEP_SUMMARY
          echo "- Thursday: Divisions 107-141" >> $GITHUB_STEP_SUMMARY
          echo "- Friday: Divisions 142-177" >> $GITHUB_STEP_SUMMARY
          echo "- Saturday: Divisions 178-213" >> $GITHUB_STEP_SUMMARY
          echo "- Sunday: Divisions 214-248" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts available:** Logs and athlete CSV files" >> $GITHUB_STEP_SUMMARY