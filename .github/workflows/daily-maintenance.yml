name: Daily Maintenance Pipeline

on:
  schedule:
    # Run daily at 7 AM UTC
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      skip_meet_scraper:
        description: 'Skip daily meet scraper'
        required: false
        type: boolean
        default: false
      skip_wso_scan:
        description: 'Skip WSO scan'
        required: false
        type: boolean
        default: false
      skip_location_processing:
        description: 'Skip meet location processing'
        required: false
        type: boolean
        default: false

jobs:
  daily-meet-scraper:
    if: ${{ !inputs.skip_meet_scraper }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create directories
        run: |
          mkdir -p output logs
          echo "📁 Created output directories"

      - name: Run daily meet scraper
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          set -o pipefail
          echo "🏋️ Starting daily meet scraper..."
          echo "🕐 Start time: $(date +'%Y-%m-%d %H:%M:%S %Z')"

          node scripts/maintenance/daily_scraper.js 2>&1 | tee logs/daily-meet-scraper.log

          if [ $? -eq 0 ]; then
            echo "✅ Daily meet scraper completed successfully"
          else
            echo "❌ Daily meet scraper failed"
            exit 1
          fi

      - name: Upload daily scraper results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-scraper-${{ github.run_number }}
          path: |
            output/
            logs/daily-meet-scraper.log
          retention-days: 7

  missing-wso-scan:
    if: ${{ !inputs.skip_wso_scan }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create directories
        run: mkdir -p logs

      - name: Run missing WSO scan
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          LIMIT_RECORDS: 10000
          FIND_DATA: true
          DATE_FILTER_MONTHS: 2
        run: |
          set -o pipefail
          echo "🔍 Starting missing WSO scan..."
          echo "🕐 Start time: $(date +'%Y-%m-%d %H:%M:%S %Z')"

          node scripts/analysis/missing-wso-scan.js 2>&1 | tee logs/missing-wso-scan.log

          if [ $? -eq 0 ]; then
            echo "✅ Missing WSO scan completed successfully"
          else
            echo "❌ Missing WSO scan failed"
            exit 1
          fi

      - name: Upload WSO scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wso-scan-${{ github.run_number }}
          path: |
            logs/missing-wso-scan.log
          retention-days: 7

  process-meet-locations:
    if: ${{ !inputs.skip_location_processing }}
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create directories
        run: mkdir -p logs

      - name: Process meet locations
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          set -o pipefail
          echo "📍 Starting meet location processing..."
          echo "🕐 Start time: $(date +'%Y-%m-%d %H:%M:%S %Z')"

          node scripts/geographic/geocode-and-import.js 2>&1 | tee logs/process-meet-locations.log

          if [ $? -eq 0 ]; then
            echo "✅ Meet location processing completed successfully"
          else
            echo "❌ Meet location processing failed"
            exit 1
          fi

      - name: Upload location processing results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: location-processing-${{ github.run_number }}
          path: |
            logs/process-meet-locations.log
          retention-days: 7

  create-summary:
    needs: [daily-meet-scraper, missing-wso-scan, process-meet-locations]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Create daily maintenance summary
        run: |
          echo "## 🔧 Daily Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Schedule:** Daily at 7:00 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Daily meet scraper summary
          if [ "${{ inputs.skip_meet_scraper }}" == "true" ]; then
            echo "### 🏋️ Daily Meet Scraper: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.daily-meet-scraper.result }}" == "success" ]; then
            echo "### 🏋️ Daily Meet Scraper: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Successfully scraped new weightlifting meets" >> $GITHUB_STEP_SUMMARY
            echo "- **Purpose:** Discover newly posted meets and results" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🏋️ Daily Meet Scraper: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # WSO scan summary
          if [ "${{ inputs.skip_wso_scan }}" == "true" ]; then
            echo "### 🔍 WSO Scan: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.missing-wso-scan.result }}" == "success" ]; then
            echo "### 🔍 WSO Scan: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Successfully scanned for missing WSO assignments" >> $GITHUB_STEP_SUMMARY
            echo "- **Purpose:** Enhance meet results with WSO data" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔍 WSO Scan: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Location processing summary
          if [ "${{ inputs.skip_location_processing }}" == "true" ]; then
            echo "### 📍 Location Processing: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.process-meet-locations.result }}" == "success" ]; then
            echo "### 📍 Location Processing: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Successfully processed meet location data" >> $GITHUB_STEP_SUMMARY
            echo "- **Purpose:** Geocode and standardize meet locations" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📍 Location Processing: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Maintenance Overview" >> $GITHUB_STEP_SUMMARY
          echo "This daily pipeline ensures:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Data freshness**: New meets and results are discovered daily" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **Data quality**: Missing WSO assignments are identified and flagged" >> $GITHUB_STEP_SUMMARY
          echo "- 📍 **Location accuracy**: Meet locations are geocoded and standardized" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Maintenance logs available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY