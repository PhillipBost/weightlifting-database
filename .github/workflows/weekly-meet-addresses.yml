name: Weekly Meet Address Scraping and Import

on:
  schedule:
    # Run every Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  scrape-and-import-addresses:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Generous timeout for scraping and geocoding
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Calculate date range (last month + current month)
        id: dates
        run: |
          # Get current date components (remove leading zeros to avoid octal interpretation)
          current_year=$(date +%Y)
          current_month=$(date +%-m)  # %-m removes leading zeros
          
          # Calculate last month
          if [ $current_month -eq 1 ]; then
            last_month=12
            last_year=$((current_year - 1))
          else
            last_month=$((current_month - 1))
            last_year=$current_year
          fi
          
          # Format months with leading zeros
          last_month_padded=$(printf "%02d" $last_month)
          current_month_padded=$(printf "%02d" $current_month)
          
          # Calculate date range
          from_date="${last_year}-${last_month_padded}-01"
          
          # Get last day of current month
          if [ $current_month -eq 12 ]; then
            next_month=1
            next_year=$((current_year + 1))
          else
            next_month=$((current_month + 1))
            next_year=$current_year
          fi
          
          # Get last day of current month by getting first day of next month and subtracting 1 day
          to_date=$(date -d "${next_year}-$(printf "%02d" $next_month)-01 -1 day" +%Y-%m-%d)
          
          echo "from_date=$from_date" >> $GITHUB_OUTPUT
          echo "to_date=$to_date" >> $GITHUB_OUTPUT
          echo "📅 Date range: $from_date to $to_date"
      
      - name: Create output and logs directories
        run: |
          mkdir -p output logs
      
      - name: Scrape meet addresses
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "🏋️ Starting meet address scraping..."
          echo "Date range: ${{ steps.dates.outputs.from_date }} to ${{ steps.dates.outputs.to_date }}"
          
          node scripts/production/meet-address-scraper.js \
            --from-date "${{ steps.dates.outputs.from_date }}" \
            --to-date "${{ steps.dates.outputs.to_date }}"
      
      - name: Check if addresses were scraped
        id: check_addresses
        run: |
          if [ -f "output/meet_addresses.json" ]; then
            # Count meets in the output file
            meet_count=$(node -e "
              const fs = require('fs');
              try {
                const data = JSON.parse(fs.readFileSync('output/meet_addresses.json', 'utf8'));
                console.log(data.meets ? data.meets.length : 0);
              } catch (e) {
                console.log(0);
              }
            ")
            echo "meet_count=$meet_count" >> $GITHUB_OUTPUT
            echo "📊 Found $meet_count meets with addresses"
            
            if [ $meet_count -gt 0 ]; then
              echo "has_addresses=true" >> $GITHUB_OUTPUT
            else
              echo "has_addresses=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No meet_addresses.json file found"
            echo "has_addresses=false" >> $GITHUB_OUTPUT
            echo "meet_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Geocode and import addresses
        if: steps.check_addresses.outputs.has_addresses == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "🌍 Starting geocoding and import..."
          echo "Processing ${{ steps.check_addresses.outputs.meet_count }} meets"
          
          node scripts/geographic/geocode-and-import.js
      
      - name: Upload results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: meet-addresses-${{ steps.dates.outputs.from_date }}-to-${{ steps.dates.outputs.to_date }}
          path: |
            output/meet_addresses.json
            logs/meet-address-scraper.log
            logs/geocode-import.log
          retention-days: 30
      
      - name: Create summary
        if: always()
        run: |
          echo "## 📍 Weekly Meet Address Scraping Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date Range:** ${{ steps.dates.outputs.from_date }} to ${{ steps.dates.outputs.to_date }}" >> $GITHUB_STEP_SUMMARY
          echo "**Meets Found:** ${{ steps.check_addresses.outputs.meet_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_addresses.outputs.has_addresses }}" == "true" ]; then
            echo "✅ **Status:** Successfully scraped and imported meet addresses" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Actions Completed:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Scraped meet directory for new meets" >> $GITHUB_STEP_SUMMARY
            echo "- 📍 Extracted meet addresses" >> $GITHUB_STEP_SUMMARY
            echo "- 🌍 Geocoded addresses using Nominatim" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Imported to Supabase meet_locations table" >> $GITHUB_STEP_SUMMARY
            echo "- 🔗 Linked to existing meets in database" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Status:** No new meets with addresses found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This is normal if no new meets were scheduled for the date range." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Logs and data available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup output files
        if: always()
        run: |
          # Keep logs but clean up large output files to save space
          rm -f output/meet_addresses.json