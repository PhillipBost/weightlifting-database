name: Type 2 Contamination Cleanup - Weekly Meet Results Decontamination

on:
  schedule:
    # 4 AM EST Sunday = 9 AM UTC Sunday (Standard Time) / 8 AM UTC Sunday (Daylight Time)
    # Using 9 AM UTC to be safe during EST - runs weekly on Sundays  
    - cron: '0 9 * * 0'
  workflow_dispatch:
    inputs:
      target_athletes:
        description: 'Comma-separated list of athlete names to process (leave blank for detection)'
        required: false
        default: ''
        type: string
      dry_run:
        description: 'Run in dry-run mode (no database changes)'
        required: false
        default: 'false'
        type: boolean

jobs:
  type2-contamination-cleanup:
    runs-on: ubuntu-latest
    
    # Set timezone for the entire job
    env:
      TZ: America/New_York
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          npm ci
          
      - name: Setup Chrome for Puppeteer
        run: |
          echo "üåê Setting up Chrome for web scraping at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          # Install Chrome dependencies
          sudo apt-get update
          sudo apt-get install -y \
            fonts-liberation \
            libasound2 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libatspi2.0-0 \
            libcups2 \
            libdbus-1-3 \
            libdrm2 \
            libgtk-3-0 \
            libnspr4 \
            libnss3 \
            libwayland-client0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxkbcommon0 \
            libxrandr2 \
            xdg-utils

      - name: Detect Type 2 Contamination (Skip if target athletes specified)
        if: ${{ github.event.inputs.target_athletes == '' }}
        run: |
          echo "üîç Starting Type 2 contamination detection at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          node detect-type2-contamination.js
          echo "‚úÖ Detection completed at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          TZ: America/New_York
        continue-on-error: true

      - name: Run Meet Results Decontamination
        run: |
          echo "üßπ Starting Type 2 contamination cleanup at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          
          # Set dry run mode if requested
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç Running in DRY RUN mode - no database changes will be made"
            export DRY_RUN_MODE=true
          fi
          
          # Set target athletes if specified
          if [ -n "${{ github.event.inputs.target_athletes }}" ]; then
            echo "üéØ Processing specific athletes: ${{ github.event.inputs.target_athletes }}"
            export TARGET_ATHLETES="${{ github.event.inputs.target_athletes }}"
          fi
          
          node meet-results-decontamination.js
          echo "‚úÖ Type 2 contamination cleanup completed at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          TZ: America/New_York

      - name: Upload artifacts for review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: type2-contamination-cleanup-${{ github.run_number }}
          path: |
            output/meet_results_decontamination_report.json
            output/type2_contamination_detection.json
            logs/meet-results-decontamination.log
            logs/detect-type2-contamination.log
          retention-days: 30

      - name: Show completion summary
        if: always()
        run: |
          echo "üìä TYPE 2 CONTAMINATION CLEANUP SUMMARY"
          echo "========================================"
          echo "Completed at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          
          # Type 2 contamination cleanup summary
          if [ -f "output/meet_results_decontamination_report.json" ]; then
            node -e "
              try {
                const report = JSON.parse(require('fs').readFileSync('output/meet_results_decontamination_report.json', 'utf8'));
                const summary = report.report.summary;
                console.log('üßπ Type 2 Contamination Cleanup Results:');
                console.log('   üìä Athletes processed:', summary.athletes_processed || 0);
                console.log('   üîÑ Results reassigned:', summary.total_reassignments || 0);
                console.log('   ‚ö†Ô∏è  Unassigned results:', summary.unassigned_results || 0);
                console.log('   ‚úÖ Success:', summary.success ? 'Yes' : 'No');
                
                if (report.report.athletes_processed) {
                  console.log('');
                  console.log('üìã Per-athlete breakdown:');
                  report.report.athletes_processed.forEach(athlete => {
                    console.log('   ‚Ä¢ ' + athlete.athlete_name + ' (' + athlete.membership_number + '): ' + 
                               athlete.correct_results + ' correct, ' + athlete.orphaned_results + ' orphaned, ' + 
                               athlete.reassignments.length + ' reassigned');
                  });
                }
              } catch (error) {
                console.log('‚ùå Could not parse contamination cleanup report:', error.message);
              }
            "
          else
            echo "üßπ Type 2 contamination cleanup: No report found"
          fi
          
          # Detection summary if it ran
          if [ -f "output/type2_contamination_detection.json" ]; then
            node -e "
              try {
                const detection = JSON.parse(require('fs').readFileSync('output/type2_contamination_detection.json', 'utf8'));
                console.log('');
                console.log('üîç Type 2 Contamination Detection Results:');
                console.log('   üìä Athletes scanned:', detection.athletes_scanned || 0);
                console.log('   ‚ö†Ô∏è  Contaminated found:', detection.contaminated_athletes?.length || 0);
                
                if (detection.contaminated_athletes && detection.contaminated_athletes.length > 0) {
                  console.log('   üìã Contaminated athletes:');
                  detection.contaminated_athletes.forEach(athlete => {
                    console.log('     ‚Ä¢ ' + athlete.athlete_name + ' (lifter_id: ' + athlete.lifter_id + ')');
                  });
                }
              } catch (error) {
                console.log('‚ùå Could not parse detection report:', error.message);
              }
            "
          fi
          
          echo ""
          echo "üìÅ Check the artifacts section above for detailed logs and reports"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå TYPE 2 CONTAMINATION CLEANUP FAILED"
          echo "======================================"
          echo "Failed at: $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          echo "Please check the workflow logs and artifacts for error details."
          echo "Manual intervention may be required."