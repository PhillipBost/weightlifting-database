name: Weekly WSO Analytics Calculation

on:
  schedule:
    # Run every Sunday at 7 AM UTC (1 hour after meet addresses scraper)
    - cron: '0 7 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  calculate-wso-analytics:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Allow generous time for calculations
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Create logs directory
        run: mkdir -p logs
      
      - name: Calculate WSO analytics
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "📊 Starting WSO analytics calculation..."
          echo "Timestamp: $(date)"
          
          # Run the analytics calculation script
          node scripts/analytics/wso-weekly-calculator.js 2>&1 | tee logs/wso-analytics.log
          
          # Check if the script ran successfully
          if [ $? -eq 0 ]; then
            echo "✅ WSO analytics calculation completed successfully"
          else
            echo "❌ WSO analytics calculation failed"
            exit 1
          fi
      
      - name: Validate results
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
        run: |
          echo "🔍 Validating analytics results..."
          
          # Create a simple validation script inline
          node -e "
            const { createClient } = require('@supabase/supabase-js');
            
            async function validateResults() {
              const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SECRET_KEY);
              
              try {
                const { data: wsos, error } = await supabase
                  .from('wso_information')
                  .select('name, barbell_clubs_count, recent_meets_count, active_lifters_count, estimated_population, analytics_updated_at')
                  .order('wso_name');
                
                if (error) throw error;
                
                console.log('📋 Analytics validation results:');
                console.log('WSO Name | Clubs | Meets | Lifters | Population | Last Updated');
                console.log('---------|-------|-------|---------|------------|-------------');
                
                let updatedToday = 0;
                const today = new Date().toISOString().split('T')[0];
                
                wsos.forEach(wso => {
                  const lastUpdated = wso.analytics_updated_at ? 
                    new Date(wso.analytics_updated_at).toISOString().split('T')[0] : 'Never';
                  
                  if (lastUpdated === today) updatedToday++;
                  
                  console.log(\`\${wso.name.padEnd(8\)} | \${String(wso.barbell_clubs_count || 0).padStart(5)} | \${String(wso.recent_meets_count || 0).padStart(5)} | \${String(wso.active_lifters_count || 0).padStart(7)} | \${String(wso.estimated_population || 0).padStart(10)} | \${lastUpdated}\`);
                });
                
                console.log(\`\\n✅ Total WSOs: \${wsos.length}\`);
                console.log(\`📅 Updated today: \${updatedToday}\`);
                
                if (updatedToday === 0) {
                  console.log('⚠️ Warning: No WSOs were updated today');
                  process.exit(1);
                }
                
              } catch (error) {
                console.error('❌ Validation failed:', error.message);
                process.exit(1);
              }
            }
            
            validateResults();
          "
      
      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wso-analytics-logs-${{ github.run_number }}
          path: |
            logs/wso-analytics.log
          retention-days: 30
      
      - name: Create summary
        if: always()
        run: |
          echo "## 📊 Weekly WSO Analytics Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Cutoff Date:** $(node -e 'const d = new Date(); d.setFullYear(d.getFullYear() - 2); console.log(d.toISOString().split("T")[0]);')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $? -eq 0 ]; then
            echo "✅ **Status:** WSO analytics calculation completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Calculated Metrics:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🏋️ **Barbell Clubs Count**: Number of barbell clubs associated with each WSO" >> $GITHUB_STEP_SUMMARY
            echo "- 📅 **Recent Meets Count**: Number of meets held in past 2 years within WSO boundaries" >> $GITHUB_STEP_SUMMARY
            echo "- 🏃 **Active Lifters Count**: Number of unique lifters who competed in past 2 years within WSO" >> $GITHUB_STEP_SUMMARY
            echo "- 🌍 **Estimated Population**: Total population within WSO geographic boundaries" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Data Sources:**" >> $GITHUB_STEP_SUMMARY
            echo "- Clubs data from \`clubs\` table with \`wso_geography\` assignments" >> $GITHUB_STEP_SUMMARY
            echo "- Meets data from \`meets\` table for past 2 years" >> $GITHUB_STEP_SUMMARY
            echo "- Lifter participation from \`meet_results\` joined with \`meets\`" >> $GITHUB_STEP_SUMMARY
            echo "- Population estimates from state-level demographic data" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** WSO analytics calculation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Update:** Next Sunday at 7 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "**Logs available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup temporary files
        if: always()
        run: |
          # Clean up any temporary files if needed
          echo "🧹 Cleanup completed"